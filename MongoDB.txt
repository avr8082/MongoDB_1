****************************************************************** MongoDB *********************************************************
# Down load & install the MongoDB 
# Start mongoDB Server from command prompt-->MongoD ENTER in Terminal 1
# Start mongo shell from another command prompt by typing just mongo - Terminal 2

CRUD = CRUD is acronym for Create, Read, Update, Delete --> This is basic data operations for working with data in MongoDB 

# In MongoDB, documents are stored in collections. Collections are organized into databases.
# database --> collections --> documents 
# namespace = db.collections (collection & database form a namespace)
# to get the help 
> help 
> show dbs
> show collections

# Mongo Shell is fully functional client application 
# Collection & database form a namespace 
# when doing operation with CRUD, we always deal with global variable called db.This variable holds reference to database
# db is global variable 

> use video 

# to insert the documents into db.video
> db.video.insertOne({"title":"Jaws", "year": 1975, "imdb":"tt001"})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5802c90bbb24337295f91a85")


# In MongoDB, all documents must have underscore ID field(for ex: "_id" : ObjectId("5802c90bbb24337295f91a85"). If NO underscore ID field specified, MongoDB will add underscore ID field to the document. This is additional value type supported by BSON
# MongoDB assigns a unique object ID as a underscore ID. Each document in the collection must have a unique ID value

# to read the documents from db.video
> db.video.find()
> db.video.find().pretty()
> db.video.find({}).pretty() # all documents will list out with this if we don't specify any parameters
> db.video.find({"title":"Jaws"}).pretty() # to query by title for ex.
> db.video.find({"year":2000}).pretty() # to query by year for ex.

# A shell is fully functional java script interpretor. We can create variable for the query 
# the return value of find is not simply an array of documents.Its instead a cursor object.Assign return value of find to a variable in mongo shell. The shell is fully functional java script interpreter.

> var c = db.video.find() 
# we can hasNext() for the cursor object
> c.hasNext() # returns true 
> c.next() # returns 
# next document of the cursor 

# to clear mongo shell screen use Ctrl+l 

************ Install Python 2.7.9 ****************************
# 1. download Python 2.7.9 and install THEN reboot the laptop
# 2. Change the environment variable PATH = C:\Python27\
# 3. Bring up the command prompt and type python at command prompt # c:\> python (usually C:\ show with the current directory , we have to come to C:\)
>>> print "Hello World" # Hello World #python installed and working properyl
# check PIP  
c:\>pip 
# it should show pip commands. If PIP didn't work, check the PATH environment variable and add C:\Python27\Scripts 

********************************** PYTHON 2.7.11 ***************************************
# 1. Python is readable 
# 2. Python is garbage collected 
# 3. Python is dynamically typed

# start python
C:\>python
Python 2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 20:40:30) [MSC v.1500 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> print ("Hello, World")
Hello, World
>>> print ("Hello" + " World")
Hello World
>>> print("hat"+"pin")
hatpin

************** PYTHON LISTS *********************

>>> a =['orange','apple','banana']  # assing the values to variable a 
>>> a # just type a for output
['orange', 'apple', 'banana']

>>> b=[1,2,3] 
>>> b
[1, 2, 3]

>>> c=[1,['orange','apple','banana'],3]
>>> c
[1, ['orange', 'apple', 'banana'], 3]
>>> c[1]
['orange', 'apple', 'banana']
>>> print c[0] # arrays start with 0
1
>>> print c[2]
3
>>> print c[1]
['orange', 'apple', 'banana']

>>> things=['hammer','nail','wall']
>>> things
['hammer', 'nail', 'wall']

****************** PYTHON LISTS SLICES  ********************
# List slices allow you to get the parts of the list

# a[start:end]
# start is starting index of the list which is INCLUSIVE
# end is ending value to return and should say ending index which EXCLUSIVE
# In Python, indexing start from 0 s
# we can do these with slice(:) operator

>>> a=[0,1,2,3,4,5]
>>> a
[0, 1, 2, 3, 4, 5]
>>> a[0:3]
[0, 1, 2]
>>> a[1:4]
[1, 2, 3]
>>> a[:4]
[0, 1, 2, 3]
>>> a[1:]
[1, 2, 3, 4, 5]
>>> a[:]
[0, 1, 2, 3, 4, 5]

# Quiz: things=['apples','orange','pear','grape','kiwi'] What is the slice notation that will return the sublist ['orange','pear']?
# Ans:things[1:3]

>>> things=['apples','orange','pear','grape','kiwi']
>>> things
['apples', 'orange', 'pear', 'grape', 'kiwi']
>>> things[1:3]
['orange', 'pear']









